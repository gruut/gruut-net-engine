// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kademlia_service.proto

#ifndef PROTOBUF_INCLUDED_kademlia_5fservice_2eproto
#define PROTOBUF_INCLUDED_kademlia_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_kademlia_5fservice_2eproto 

namespace protobuf_kademlia_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_kademlia_5fservice_2eproto
namespace kademlia {
class Neighbors;
class NeighborsDefaultTypeInternal;
extern NeighborsDefaultTypeInternal _Neighbors_default_instance_;
class Neighbors_node;
class Neighbors_nodeDefaultTypeInternal;
extern Neighbors_nodeDefaultTypeInternal _Neighbors_node_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class Pong;
class PongDefaultTypeInternal;
extern PongDefaultTypeInternal _Pong_default_instance_;
class Target;
class TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
}  // namespace kademlia
namespace google {
namespace protobuf {
template<> ::kademlia::Neighbors* Arena::CreateMaybeMessage<::kademlia::Neighbors>(Arena*);
template<> ::kademlia::Neighbors_node* Arena::CreateMaybeMessage<::kademlia::Neighbors_node>(Arena*);
template<> ::kademlia::Ping* Arena::CreateMaybeMessage<::kademlia::Ping>(Arena*);
template<> ::kademlia::Pong* Arena::CreateMaybeMessage<::kademlia::Pong>(Arena*);
template<> ::kademlia::Target* Arena::CreateMaybeMessage<::kademlia::Target>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace kademlia {

// ===================================================================

class Target : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kademlia.Target) */ {
 public:
  Target();
  virtual ~Target();

  Target(const Target& from);

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Target(Target&& from) noexcept
    : Target() {
    *this = ::std::move(from);
  }

  inline Target& operator=(Target&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Target& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Target* other);
  friend void swap(Target& a, Target& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Target* New() const final {
    return CreateMaybeMessage<Target>(NULL);
  }

  Target* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Target>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes target_id = 1;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  const ::std::string& target_id() const;
  void set_target_id(const ::std::string& value);
  #if LANG_CXX11
  void set_target_id(::std::string&& value);
  #endif
  void set_target_id(const char* value);
  void set_target_id(const void* value, size_t size);
  ::std::string* mutable_target_id();
  ::std::string* release_target_id();
  void set_allocated_target_id(::std::string* target_id);

  // bytes sender_id = 2;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  const ::std::string& sender_id() const;
  void set_sender_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_id(::std::string&& value);
  #endif
  void set_sender_id(const char* value);
  void set_sender_id(const void* value, size_t size);
  ::std::string* mutable_sender_id();
  ::std::string* release_sender_id();
  void set_allocated_sender_id(::std::string* sender_id);

  // string sender_address = 3;
  void clear_sender_address();
  static const int kSenderAddressFieldNumber = 3;
  const ::std::string& sender_address() const;
  void set_sender_address(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_address(::std::string&& value);
  #endif
  void set_sender_address(const char* value);
  void set_sender_address(const char* value, size_t size);
  ::std::string* mutable_sender_address();
  ::std::string* release_sender_address();
  void set_allocated_sender_address(::std::string* sender_address);

  // string sender_port = 4;
  void clear_sender_port();
  static const int kSenderPortFieldNumber = 4;
  const ::std::string& sender_port() const;
  void set_sender_port(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_port(::std::string&& value);
  #endif
  void set_sender_port(const char* value);
  void set_sender_port(const char* value, size_t size);
  ::std::string* mutable_sender_port();
  ::std::string* release_sender_port();
  void set_allocated_sender_port(::std::string* sender_port);

  // uint64 time_stamp = 5;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 5;
  ::google::protobuf::uint64 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kademlia.Target)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_id_;
  ::google::protobuf::internal::ArenaStringPtr sender_id_;
  ::google::protobuf::internal::ArenaStringPtr sender_address_;
  ::google::protobuf::internal::ArenaStringPtr sender_port_;
  ::google::protobuf::uint64 time_stamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kademlia_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Neighbors_node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kademlia.Neighbors.node) */ {
 public:
  Neighbors_node();
  virtual ~Neighbors_node();

  Neighbors_node(const Neighbors_node& from);

  inline Neighbors_node& operator=(const Neighbors_node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Neighbors_node(Neighbors_node&& from) noexcept
    : Neighbors_node() {
    *this = ::std::move(from);
  }

  inline Neighbors_node& operator=(Neighbors_node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Neighbors_node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Neighbors_node* internal_default_instance() {
    return reinterpret_cast<const Neighbors_node*>(
               &_Neighbors_node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Neighbors_node* other);
  friend void swap(Neighbors_node& a, Neighbors_node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Neighbors_node* New() const final {
    return CreateMaybeMessage<Neighbors_node>(NULL);
  }

  Neighbors_node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Neighbors_node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Neighbors_node& from);
  void MergeFrom(const Neighbors_node& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neighbors_node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const void* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:kademlia.Neighbors.node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kademlia_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Neighbors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kademlia.Neighbors) */ {
 public:
  Neighbors();
  virtual ~Neighbors();

  Neighbors(const Neighbors& from);

  inline Neighbors& operator=(const Neighbors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Neighbors(Neighbors&& from) noexcept
    : Neighbors() {
    *this = ::std::move(from);
  }

  inline Neighbors& operator=(Neighbors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Neighbors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Neighbors* internal_default_instance() {
    return reinterpret_cast<const Neighbors*>(
               &_Neighbors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Neighbors* other);
  friend void swap(Neighbors& a, Neighbors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Neighbors* New() const final {
    return CreateMaybeMessage<Neighbors>(NULL);
  }

  Neighbors* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Neighbors>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Neighbors& from);
  void MergeFrom(const Neighbors& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neighbors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Neighbors_node node;

  // accessors -------------------------------------------------------

  // repeated .kademlia.Neighbors.node neighbors = 1;
  int neighbors_size() const;
  void clear_neighbors();
  static const int kNeighborsFieldNumber = 1;
  ::kademlia::Neighbors_node* mutable_neighbors(int index);
  ::google::protobuf::RepeatedPtrField< ::kademlia::Neighbors_node >*
      mutable_neighbors();
  const ::kademlia::Neighbors_node& neighbors(int index) const;
  ::kademlia::Neighbors_node* add_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::kademlia::Neighbors_node >&
      neighbors() const;

  // uint64 time_stamp = 2;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  ::google::protobuf::uint64 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:kademlia.Neighbors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::kademlia::Neighbors_node > neighbors_;
  ::google::protobuf::uint64 time_stamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kademlia_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kademlia.Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Ping* other);
  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(NULL);
  }

  Ping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const void* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // string sender_address = 2;
  void clear_sender_address();
  static const int kSenderAddressFieldNumber = 2;
  const ::std::string& sender_address() const;
  void set_sender_address(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_address(::std::string&& value);
  #endif
  void set_sender_address(const char* value);
  void set_sender_address(const char* value, size_t size);
  ::std::string* mutable_sender_address();
  ::std::string* release_sender_address();
  void set_allocated_sender_address(::std::string* sender_address);

  // string sender_port = 3;
  void clear_sender_port();
  static const int kSenderPortFieldNumber = 3;
  const ::std::string& sender_port() const;
  void set_sender_port(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_port(::std::string&& value);
  #endif
  void set_sender_port(const char* value);
  void set_sender_port(const char* value, size_t size);
  ::std::string* mutable_sender_port();
  ::std::string* release_sender_port();
  void set_allocated_sender_port(::std::string* sender_port);

  // uint64 time_stamp = 5;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 5;
  ::google::protobuf::uint64 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint64 value);

  // uint32 version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:kademlia.Ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::internal::ArenaStringPtr sender_address_;
  ::google::protobuf::internal::ArenaStringPtr sender_port_;
  ::google::protobuf::uint64 time_stamp_;
  ::google::protobuf::uint32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kademlia_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kademlia.Pong) */ {
 public:
  Pong();
  virtual ~Pong();

  Pong(const Pong& from);

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pong(Pong&& from) noexcept
    : Pong() {
    *this = ::std::move(from);
  }

  inline Pong& operator=(Pong&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pong& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pong* internal_default_instance() {
    return reinterpret_cast<const Pong*>(
               &_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Pong* other);
  friend void swap(Pong& a, Pong& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pong* New() const final {
    return CreateMaybeMessage<Pong>(NULL);
  }

  Pong* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pong>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pong* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const void* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // uint64 time_stamp = 3;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  ::google::protobuf::uint64 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint64 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:kademlia.Pong)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::uint64 time_stamp_;
  ::google::protobuf::uint32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kademlia_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Target

// bytes target_id = 1;
inline void Target::clear_target_id() {
  target_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Target::target_id() const {
  // @@protoc_insertion_point(field_get:kademlia.Target.target_id)
  return target_id_.GetNoArena();
}
inline void Target::set_target_id(const ::std::string& value) {
  
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Target.target_id)
}
#if LANG_CXX11
inline void Target::set_target_id(::std::string&& value) {
  
  target_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Target.target_id)
}
#endif
inline void Target::set_target_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Target.target_id)
}
inline void Target::set_target_id(const void* value, size_t size) {
  
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Target.target_id)
}
inline ::std::string* Target::mutable_target_id() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Target.target_id)
  return target_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Target::release_target_id() {
  // @@protoc_insertion_point(field_release:kademlia.Target.target_id)
  
  return target_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Target::set_allocated_target_id(::std::string* target_id) {
  if (target_id != NULL) {
    
  } else {
    
  }
  target_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_id);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Target.target_id)
}

// bytes sender_id = 2;
inline void Target::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Target::sender_id() const {
  // @@protoc_insertion_point(field_get:kademlia.Target.sender_id)
  return sender_id_.GetNoArena();
}
inline void Target::set_sender_id(const ::std::string& value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Target.sender_id)
}
#if LANG_CXX11
inline void Target::set_sender_id(::std::string&& value) {
  
  sender_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Target.sender_id)
}
#endif
inline void Target::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Target.sender_id)
}
inline void Target::set_sender_id(const void* value, size_t size) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Target.sender_id)
}
inline ::std::string* Target::mutable_sender_id() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Target.sender_id)
  return sender_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Target::release_sender_id() {
  // @@protoc_insertion_point(field_release:kademlia.Target.sender_id)
  
  return sender_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Target::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    
  } else {
    
  }
  sender_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Target.sender_id)
}

// string sender_address = 3;
inline void Target::clear_sender_address() {
  sender_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Target::sender_address() const {
  // @@protoc_insertion_point(field_get:kademlia.Target.sender_address)
  return sender_address_.GetNoArena();
}
inline void Target::set_sender_address(const ::std::string& value) {
  
  sender_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Target.sender_address)
}
#if LANG_CXX11
inline void Target::set_sender_address(::std::string&& value) {
  
  sender_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Target.sender_address)
}
#endif
inline void Target::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Target.sender_address)
}
inline void Target::set_sender_address(const char* value, size_t size) {
  
  sender_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Target.sender_address)
}
inline ::std::string* Target::mutable_sender_address() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Target.sender_address)
  return sender_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Target::release_sender_address() {
  // @@protoc_insertion_point(field_release:kademlia.Target.sender_address)
  
  return sender_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Target::set_allocated_sender_address(::std::string* sender_address) {
  if (sender_address != NULL) {
    
  } else {
    
  }
  sender_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_address);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Target.sender_address)
}

// string sender_port = 4;
inline void Target::clear_sender_port() {
  sender_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Target::sender_port() const {
  // @@protoc_insertion_point(field_get:kademlia.Target.sender_port)
  return sender_port_.GetNoArena();
}
inline void Target::set_sender_port(const ::std::string& value) {
  
  sender_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Target.sender_port)
}
#if LANG_CXX11
inline void Target::set_sender_port(::std::string&& value) {
  
  sender_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Target.sender_port)
}
#endif
inline void Target::set_sender_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Target.sender_port)
}
inline void Target::set_sender_port(const char* value, size_t size) {
  
  sender_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Target.sender_port)
}
inline ::std::string* Target::mutable_sender_port() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Target.sender_port)
  return sender_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Target::release_sender_port() {
  // @@protoc_insertion_point(field_release:kademlia.Target.sender_port)
  
  return sender_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Target::set_allocated_sender_port(::std::string* sender_port) {
  if (sender_port != NULL) {
    
  } else {
    
  }
  sender_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_port);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Target.sender_port)
}

// uint64 time_stamp = 5;
inline void Target::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Target::time_stamp() const {
  // @@protoc_insertion_point(field_get:kademlia.Target.time_stamp)
  return time_stamp_;
}
inline void Target::set_time_stamp(::google::protobuf::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:kademlia.Target.time_stamp)
}

// -------------------------------------------------------------------

// Neighbors_node

// bytes node_id = 1;
inline void Neighbors_node::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Neighbors_node::node_id() const {
  // @@protoc_insertion_point(field_get:kademlia.Neighbors.node.node_id)
  return node_id_.GetNoArena();
}
inline void Neighbors_node::set_node_id(const ::std::string& value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Neighbors.node.node_id)
}
#if LANG_CXX11
inline void Neighbors_node::set_node_id(::std::string&& value) {
  
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Neighbors.node.node_id)
}
#endif
inline void Neighbors_node::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Neighbors.node.node_id)
}
inline void Neighbors_node::set_node_id(const void* value, size_t size) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Neighbors.node.node_id)
}
inline ::std::string* Neighbors_node::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Neighbors.node.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neighbors_node::release_node_id() {
  // @@protoc_insertion_point(field_release:kademlia.Neighbors.node.node_id)
  
  return node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neighbors_node::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Neighbors.node.node_id)
}

// string address = 2;
inline void Neighbors_node::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Neighbors_node::address() const {
  // @@protoc_insertion_point(field_get:kademlia.Neighbors.node.address)
  return address_.GetNoArena();
}
inline void Neighbors_node::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Neighbors.node.address)
}
#if LANG_CXX11
inline void Neighbors_node::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Neighbors.node.address)
}
#endif
inline void Neighbors_node::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Neighbors.node.address)
}
inline void Neighbors_node::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Neighbors.node.address)
}
inline ::std::string* Neighbors_node::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Neighbors.node.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neighbors_node::release_address() {
  // @@protoc_insertion_point(field_release:kademlia.Neighbors.node.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neighbors_node::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Neighbors.node.address)
}

// string port = 3;
inline void Neighbors_node::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Neighbors_node::port() const {
  // @@protoc_insertion_point(field_get:kademlia.Neighbors.node.port)
  return port_.GetNoArena();
}
inline void Neighbors_node::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Neighbors.node.port)
}
#if LANG_CXX11
inline void Neighbors_node::set_port(::std::string&& value) {
  
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Neighbors.node.port)
}
#endif
inline void Neighbors_node::set_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Neighbors.node.port)
}
inline void Neighbors_node::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Neighbors.node.port)
}
inline ::std::string* Neighbors_node::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Neighbors.node.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Neighbors_node::release_port() {
  // @@protoc_insertion_point(field_release:kademlia.Neighbors.node.port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Neighbors_node::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Neighbors.node.port)
}

// -------------------------------------------------------------------

// Neighbors

// repeated .kademlia.Neighbors.node neighbors = 1;
inline int Neighbors::neighbors_size() const {
  return neighbors_.size();
}
inline void Neighbors::clear_neighbors() {
  neighbors_.Clear();
}
inline ::kademlia::Neighbors_node* Neighbors::mutable_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:kademlia.Neighbors.neighbors)
  return neighbors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::kademlia::Neighbors_node >*
Neighbors::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:kademlia.Neighbors.neighbors)
  return &neighbors_;
}
inline const ::kademlia::Neighbors_node& Neighbors::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:kademlia.Neighbors.neighbors)
  return neighbors_.Get(index);
}
inline ::kademlia::Neighbors_node* Neighbors::add_neighbors() {
  // @@protoc_insertion_point(field_add:kademlia.Neighbors.neighbors)
  return neighbors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::kademlia::Neighbors_node >&
Neighbors::neighbors() const {
  // @@protoc_insertion_point(field_list:kademlia.Neighbors.neighbors)
  return neighbors_;
}

// uint64 time_stamp = 2;
inline void Neighbors::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Neighbors::time_stamp() const {
  // @@protoc_insertion_point(field_get:kademlia.Neighbors.time_stamp)
  return time_stamp_;
}
inline void Neighbors::set_time_stamp(::google::protobuf::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:kademlia.Neighbors.time_stamp)
}

// -------------------------------------------------------------------

// Ping

// bytes node_id = 1;
inline void Ping::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ping::node_id() const {
  // @@protoc_insertion_point(field_get:kademlia.Ping.node_id)
  return node_id_.GetNoArena();
}
inline void Ping::set_node_id(const ::std::string& value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Ping.node_id)
}
#if LANG_CXX11
inline void Ping::set_node_id(::std::string&& value) {
  
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Ping.node_id)
}
#endif
inline void Ping::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Ping.node_id)
}
inline void Ping::set_node_id(const void* value, size_t size) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Ping.node_id)
}
inline ::std::string* Ping::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Ping.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ping::release_node_id() {
  // @@protoc_insertion_point(field_release:kademlia.Ping.node_id)
  
  return node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ping::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Ping.node_id)
}

// string sender_address = 2;
inline void Ping::clear_sender_address() {
  sender_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ping::sender_address() const {
  // @@protoc_insertion_point(field_get:kademlia.Ping.sender_address)
  return sender_address_.GetNoArena();
}
inline void Ping::set_sender_address(const ::std::string& value) {
  
  sender_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Ping.sender_address)
}
#if LANG_CXX11
inline void Ping::set_sender_address(::std::string&& value) {
  
  sender_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Ping.sender_address)
}
#endif
inline void Ping::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Ping.sender_address)
}
inline void Ping::set_sender_address(const char* value, size_t size) {
  
  sender_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Ping.sender_address)
}
inline ::std::string* Ping::mutable_sender_address() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Ping.sender_address)
  return sender_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ping::release_sender_address() {
  // @@protoc_insertion_point(field_release:kademlia.Ping.sender_address)
  
  return sender_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ping::set_allocated_sender_address(::std::string* sender_address) {
  if (sender_address != NULL) {
    
  } else {
    
  }
  sender_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_address);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Ping.sender_address)
}

// string sender_port = 3;
inline void Ping::clear_sender_port() {
  sender_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ping::sender_port() const {
  // @@protoc_insertion_point(field_get:kademlia.Ping.sender_port)
  return sender_port_.GetNoArena();
}
inline void Ping::set_sender_port(const ::std::string& value) {
  
  sender_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Ping.sender_port)
}
#if LANG_CXX11
inline void Ping::set_sender_port(::std::string&& value) {
  
  sender_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Ping.sender_port)
}
#endif
inline void Ping::set_sender_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Ping.sender_port)
}
inline void Ping::set_sender_port(const char* value, size_t size) {
  
  sender_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Ping.sender_port)
}
inline ::std::string* Ping::mutable_sender_port() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Ping.sender_port)
  return sender_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ping::release_sender_port() {
  // @@protoc_insertion_point(field_release:kademlia.Ping.sender_port)
  
  return sender_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ping::set_allocated_sender_port(::std::string* sender_port) {
  if (sender_port != NULL) {
    
  } else {
    
  }
  sender_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_port);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Ping.sender_port)
}

// uint32 version = 4;
inline void Ping::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 Ping::version() const {
  // @@protoc_insertion_point(field_get:kademlia.Ping.version)
  return version_;
}
inline void Ping::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:kademlia.Ping.version)
}

// uint64 time_stamp = 5;
inline void Ping::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Ping::time_stamp() const {
  // @@protoc_insertion_point(field_get:kademlia.Ping.time_stamp)
  return time_stamp_;
}
inline void Ping::set_time_stamp(::google::protobuf::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:kademlia.Ping.time_stamp)
}

// -------------------------------------------------------------------

// Pong

// bytes node_id = 1;
inline void Pong::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pong::node_id() const {
  // @@protoc_insertion_point(field_get:kademlia.Pong.node_id)
  return node_id_.GetNoArena();
}
inline void Pong::set_node_id(const ::std::string& value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kademlia.Pong.node_id)
}
#if LANG_CXX11
inline void Pong::set_node_id(::std::string&& value) {
  
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kademlia.Pong.node_id)
}
#endif
inline void Pong::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kademlia.Pong.node_id)
}
inline void Pong::set_node_id(const void* value, size_t size) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kademlia.Pong.node_id)
}
inline ::std::string* Pong::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:kademlia.Pong.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pong::release_node_id() {
  // @@protoc_insertion_point(field_release:kademlia.Pong.node_id)
  
  return node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pong::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:kademlia.Pong.node_id)
}

// uint32 version = 2;
inline void Pong::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 Pong::version() const {
  // @@protoc_insertion_point(field_get:kademlia.Pong.version)
  return version_;
}
inline void Pong::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:kademlia.Pong.version)
}

// uint64 time_stamp = 3;
inline void Pong::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Pong::time_stamp() const {
  // @@protoc_insertion_point(field_get:kademlia.Pong.time_stamp)
  return time_stamp_;
}
inline void Pong::set_time_stamp(::google::protobuf::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:kademlia.Pong.time_stamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kademlia

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_kademlia_5fservice_2eproto
