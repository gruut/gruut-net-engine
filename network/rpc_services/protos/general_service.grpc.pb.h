// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: general_service.proto
#ifndef GRPC_general_5fservice_2eproto__INCLUDED
#define GRPC_general_5fservice_2eproto__INCLUDED

#include "general_service.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpc_general {

class GruutGeneralService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc_general.GruutGeneralService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc_general::Identity, ::grpc_general::ReplyMsg>> OpenChannel(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::grpc_general::Identity, ::grpc_general::ReplyMsg>>(OpenChannelRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_general::Identity, ::grpc_general::ReplyMsg>> AsyncOpenChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_general::Identity, ::grpc_general::ReplyMsg>>(AsyncOpenChannelRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_general::Identity, ::grpc_general::ReplyMsg>> PrepareAsyncOpenChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::grpc_general::Identity, ::grpc_general::ReplyMsg>>(PrepareAsyncOpenChannelRaw(context, cq));
    }
    virtual ::grpc::Status GeneralService(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc_general::MsgStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_general::MsgStatus>> AsyncGeneralService(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_general::MsgStatus>>(AsyncGeneralServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_general::MsgStatus>> PrepareAsyncGeneralService(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_general::MsgStatus>>(PrepareAsyncGeneralServiceRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::grpc_general::Identity, ::grpc_general::ReplyMsg>* OpenChannelRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc_general::Identity, ::grpc_general::ReplyMsg>* AsyncOpenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::grpc_general::Identity, ::grpc_general::ReplyMsg>* PrepareAsyncOpenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_general::MsgStatus>* AsyncGeneralServiceRaw(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_general::MsgStatus>* PrepareAsyncGeneralServiceRaw(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc_general::Identity, ::grpc_general::ReplyMsg>> OpenChannel(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::grpc_general::Identity, ::grpc_general::ReplyMsg>>(OpenChannelRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc_general::Identity, ::grpc_general::ReplyMsg>> AsyncOpenChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc_general::Identity, ::grpc_general::ReplyMsg>>(AsyncOpenChannelRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::grpc_general::Identity, ::grpc_general::ReplyMsg>> PrepareAsyncOpenChannel(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::grpc_general::Identity, ::grpc_general::ReplyMsg>>(PrepareAsyncOpenChannelRaw(context, cq));
    }
    ::grpc::Status GeneralService(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc_general::MsgStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_general::MsgStatus>> AsyncGeneralService(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_general::MsgStatus>>(AsyncGeneralServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_general::MsgStatus>> PrepareAsyncGeneralService(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_general::MsgStatus>>(PrepareAsyncGeneralServiceRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter< ::grpc_general::Identity, ::grpc_general::ReplyMsg>* OpenChannelRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc_general::Identity, ::grpc_general::ReplyMsg>* AsyncOpenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::grpc_general::Identity, ::grpc_general::ReplyMsg>* PrepareAsyncOpenChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_general::MsgStatus>* AsyncGeneralServiceRaw(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_general::MsgStatus>* PrepareAsyncGeneralServiceRaw(::grpc::ClientContext* context, const ::grpc_general::RequestMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OpenChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_GeneralService_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status OpenChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_general::ReplyMsg, ::grpc_general::Identity>* stream);
    virtual ::grpc::Status GeneralService(::grpc::ServerContext* context, const ::grpc_general::RequestMsg* request, ::grpc_general::MsgStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OpenChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OpenChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_general::ReplyMsg, ::grpc_general::Identity>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenChannel(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc_general::ReplyMsg, ::grpc_general::Identity>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GeneralService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GeneralService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GeneralService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneralService(::grpc::ServerContext* context, const ::grpc_general::RequestMsg* request, ::grpc_general::MsgStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneralService(::grpc::ServerContext* context, ::grpc_general::RequestMsg* request, ::grpc::ServerAsyncResponseWriter< ::grpc_general::MsgStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OpenChannel<WithAsyncMethod_GeneralService<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_OpenChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OpenChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OpenChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_general::ReplyMsg, ::grpc_general::Identity>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GeneralService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GeneralService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GeneralService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneralService(::grpc::ServerContext* context, const ::grpc_general::RequestMsg* request, ::grpc_general::MsgStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OpenChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OpenChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::grpc_general::ReplyMsg, ::grpc_general::Identity>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenChannel(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GeneralService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GeneralService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GeneralService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneralService(::grpc::ServerContext* context, const ::grpc_general::RequestMsg* request, ::grpc_general::MsgStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneralService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GeneralService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GeneralService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_general::RequestMsg, ::grpc_general::MsgStatus>(std::bind(&WithStreamedUnaryMethod_GeneralService<BaseClass>::StreamedGeneralService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GeneralService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GeneralService(::grpc::ServerContext* context, const ::grpc_general::RequestMsg* request, ::grpc_general::MsgStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGeneralService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_general::RequestMsg,::grpc_general::MsgStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GeneralService<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GeneralService<Service > StreamedService;
};

}  // namespace grpc_general


#endif  // GRPC_general_5fservice_2eproto__INCLUDED
